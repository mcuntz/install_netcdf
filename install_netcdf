#!/usr/bin/env bash
#
# Install open source packages to work with netCDF and openMPI on Mac OS X and
# Linux.
#
# The script was initially written to install netCDF4 (hence its name) and all
# its dependencies to be used with different Fortran compilers, as well as some
# netCDF tools such as cdo, nco and ncview.
#
# It is also used to install missing packages locally on computing clusters. For
# example, a cluster might have the netCDF C-library installed but not the
# Fortran version.
#
# Set parameters in Setup section below, as well as directories to packages that
# are already installed.
#
# Prerequisites:          curl, c and c++ compilers, pkg-config for nco.
# Optional prerequisites: fortran compiler (e.g. gfortran) for netcdf and MPI
#                         java compiler for antlr2, i.e. ncap2 of nco
#
# The script was tested on Mac OS X 10.9 through 13 (Mavericks to Ventura).
# It was not tested on Ubuntu for quite a while.
#
# Dependencies are:
#   hdf5            <- zlib, szip
#   netcdf4         <- hdf5
#   netcdf4_fortran <- netcdf4
#   grib_api        <- netcdf4, jasper, libpng
#     or
#   eccodes         <- netcdf4, jasper, libpng
#   libtiff         <- jpeg
#   proj4           <- sqlite, libtiff, curl
#   cdo             <- netcdf4, proj4, grib_api or eccodes, udunits
#   nco             <- netcdf4, gsl, udunits, pkg-config,
#                      antlr v2 (not v3/4) for ncap2
#   ncview          <- netcdf4, udunits
#   ffmpeg          <- yasm
#
# The websites to check for the latest versions are:
#   zlib              - http://zlib.net
#   openssl           - https://www.openssl.org/source/
#   szip              - http://www.hdfgroup.org/ftp/lib-external/szip/
#   hdf5              - http://www.hdfgroup.org/ftp/HDF5/releases/
#   netcdf4/_fortran  - https://downloads.unidata.ucar.edu/netcdf/
#   netcdf3           - http://www.unidata.ucar.edu/downloads/netcdf/netcdf-3_6_3
#   udunits           - ftp://ftp.unidata.ucar.edu/pub/udunits/
#   libpng            - http://sourceforge.net/projects/libpng/files/
#   libjpeg           - http://www.ijg.org/files/
#   libtiff           - https://download.osgeo.org/libtiff/
#   proj4             - https://download.osgeo.org/proj/
#   jasper            - http://www.ece.uvic.ca/~frodo/jasper/
#   grib_api          - https://software.ecmwf.int/wiki/display/GRIB/Releases
#   eccodes           - https://software.ecmwf.int/wiki/display/ECC/Releases
#   cdo               - https://code.zmaw.de/projects/cdo/files
#   ncview            - ftp://cirrus.ucsd.edu/pub/ncview/
#   gsl               - ftp://ftp.gnu.org/gnu/gsl/
#   antlr             - http://www.antlr2.org/download.html
#   nco               - http://nco.sourceforge.net/nco.html
#   openmpi           - http://www.open-mpi.org
#   mpich             - http://www.mpich.org/downloads/
#   geos              - https://download.osgeo.org/geos
#   gdal              - https://trac.osgeo.org/gdal/wiki/DownloadSource
#   yasm              - http://yasm.tortall.net/Download.html
#   ffmpeg            - http://ffmpeg.org/releases/
#   p7zip             - http://sourceforge.net/projects/p7zip/
#   hdf4              - http://www.hdfgroup.org/release4/obtain.html
#   enscript          - http://ftp.gnu.org/gnu/enscript
#   htop              - http://hisham.hm/htop/
#
# Check for all latest versions by copying to open/xdg-open:
# http://zlib.net https://www.openssl.org/source/ http://www.hdfgroup.org/ftp/lib-external/szip/ http://www.hdfgroup.org/ftp/HDF5/releases/ https://downloads.unidata.ucar.edu/netcdf/ http://www.unidata.ucar.edu/downloads/netcdf/netcdf-3_6_3 ftp://ftp.unidata.ucar.edu/pub/udunits/ http://sourceforge.net/projects/libpng/files/ http://www.ijg.org/files/ https://download.osgeo.org/libtiff/ https://download.osgeo.org/proj/ http://www.ece.uvic.ca/~frodo/jasper/ https://software.ecmwf.int/wiki/display/GRIB/Releases https://software.ecmwf.int/wiki/display/ECC/Releases https://code.zmaw.de/projects/cdo/files ftp://cirrus.ucsd.edu/pub/ncview/ ftp://ftp.gnu.org/gnu/gsl/ http://www.antlr2.org/download.html http://nco.sourceforge.net/nco.html http://www.open-mpi.org http://www.mpich.org/downloads/ https://download.osgeo.org/geos https://trac.osgeo.org/gdal/wiki/DownloadSource http://yasm.tortall.net/Download.html http://ffmpeg.org/releases/ http://sourceforge.net/projects/p7zip/ http://www.hdfgroup.org/release4/obtain.html http://ftp.gnu.org/gnu/enscript http://hisham.hm/htop/releases/
#
# Note
# - Do not untabify this script because the netcdf_fortran libtool patch will
#   not work anymore.
# - If some libraries are already installed such as png, set dolibpng=0 below.
#   One can set EXTRA_CPPFLAGS and EXTRA_LDFLAGS if the compilers do not find it
#   automatically,
#   for example: EXTRA_LDFLAGS='-L/opt/local'
#
# Note on Mac OS X using homebrew
#   One can use homebrew to install everything except the Fortran versions. This
#   is very practical. However, homebrew upgrades also netcdf-c to newer
#   versions if you install or update a package that depends on it. Then the
#   netcdf-fortran package installed with this script will not work anymore and
#   you have to rerun the script. I still do it this way because re-installing
#   netcdf-fortran with this script is very fast.
#   To use it with homebrew:
#     install homebrew
#     install the following packages via homebrew by typing: brew install <PACKAGE>
#     for i in ghostscript gcc netcdf cmake udunits proj jasper gsl ; do \
#       brew install ${i} ; done
#     for i in antlr@2 geos gdal nco ncview ; do brew install ${i} ; done
#     Then, do not select the installed packages below
#       dozlib=0
#       doszip=0
#       dohdf5=0
#       donetcdf4=0
#       doudunits=0
#       dolibpng=0
#       dolibjpeg=0
#       dolibtiff=0
#       doproj4=0
#       dojasper=0
#       dogsl=0
#       doantlr=0
#       donco=0
#       doncview=0
#     Then use the script to install all libraries that provide Fortran interfaces
#     with all your Fortran compilers, such as netcdf4-fortran, netcdf3, openmpi,
#     mpich, giving the list of your Fortran compilers below, e.g.
#       fortran_compilers="gfortran nagfor pgfortran ifort"
#
#   Homebrew can also be used for the additional packages
#     for i in wget imagemagick ffmpeg enscript htop ; do brew install ${i} ; done
#
# Note on (Scientific) Linux
#   zlib installed by default.
#   Install antlr-C++ bindings from paket manager.
#
# Note on Ubuntu
#   install the following software from package management via the command line
#   by typing sudo apt install <PACKAGE>
#     zlib [installed by default on Ubuntu]
#       or
#     libz-mingw-w64 [on Ubuntu on Windows]
#     libpng-dev
#     libtiff-dev [installs libjpeg-dev]
#     libantlr-dev
#     libexpat-dev
#     libcurl4-openssl-dev
#     xorg-dev
#     cmake
#     bison
#   Therefore do not select the packages below
#     dozlib=0
#     dolibpng=0
#     dolibjpeg=0
#     dolibtiff=0
#     doantlr=0
#
# authors: Matthias Cuntz with testing by Stephan Thober
# created: Oct 2014
#
# Copyright (c) 2014-2023 Matthias Cuntz - mc (at) macu (dot) de
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# --------------------------------------------------------------------
# Info

set -e
prog=$0
pprog=$(basename ${prog})
dprog=$(dirname ${prog})
pid="$$"
sys=$(uname -s | tr A-Z a-z)
ver=$(uname -r)
kern=$(uname -r | tr A-Z a-z)
if [[ "${sys}" == "darwin" ]] ; then
    ncpu=$(sysctl -n hw.ncpu)
else
    ncpu=$(( 2 * $(grep ^processor /proc/cpuinfo | wc -l) ))
fi

# --------------------------------------------------------------------
# Help

function usage () {
    printf "${pprog} [h]\n"
    printf "\n"
    printf "Install open source packages such as the netcdf library.\n"
    printf "There are no command line options. Edit the Setup section in the script instead.\n"
    printf "\n"
    printf "Options\n"
    printf "    -h    Prints this help screen.\n"
    printf "\n"
    printf "Examples\n"
    printf "    ${pprog}\n"
    printf "\n"
    printf "Copyright (c) 2014-2019 Matthias Cuntz - mc (at) macu (dot) de\n"
}
while getopts "h" Option ; do
    case ${Option} in
        h) usage; exit;;
        *) printf "Error ${pprog}: unimplemented option.\n\n" 1>&2;  usage 1>&2; exit 1;;
    esac
done

# --------------------------------------------------------------------
# Setup

# Where to install
prefix=/usr/local

# Which steps to do
# steps are: 1. download, 2. unpack, 3. configure, make, install, 4. clean-up
dodownload=1 # 1: curl sources, 0: skip
docheck=1    # 1: make check, 2: make check but do not exit on errors, 0: skip
dormtar=1    # 1: rm downloaded sources, 0: skip
dosudo=1     # 1: install in ${prefix} with sudo, 0: install as user

# What is to be installed in which version (setup list)

# Basics - everything for programming with netCDF and MPI
dozlib=0
  zlib=1.2.13
doopenssl=0
  openssl=1.1.1d
doszip=0
  szip=2.1.1
doparallel=0             # Parallel HDF5 and netCDF4, set e.g. prefix=/usr/local/openmpi
  mpiprefix=/usr/local/openmpi-4.1.4-gfortran
dohdf5=0
  hdf5=1.14.0
  hdf5check=0            # omit tests of hdf5: tests take a very, very long time for hdf5 > 1.10
donetcdf4=0              # make check might stop but library works
  netcdf4=4.9.2
donetcdf4_fortran=0      # make check might stop but library works
  netcdf4_fortran=4.6.1
donetcdf3=0
  netcdf3=3.6.3
doudunits=0
  udunits=2.2.26
dolibpng=0
  libpng=1.6.37
  dolibjpeg=0            # one test fails on Linux, but seems to work
  libjpeg=9e
dolibtiff=0              # eight tests fail on Linux, but seems to work
  libtiff=4.4.0
dosqlite=0
  sqlite=3.39.0
doproj4=0                # some tests fail on Linux, but seems to work
  proj4=8.2.1            # v8.2.1 last one that supports autotools; >v9 uses Cmake
dojasper=0
  jasper=1.900.1         # 1.900.29; tested 2.0.14, but not compatible with grib_api
doeccodes=0              # for cdo > 1.9.0
  eccodes=2.16.0         # make check fails (bufr not installed): ignore
                         #   just cd into build directory eccodes-${eccodes}-Source/build and sudo make install
dogrib_api=0
  grib_api=1.28.0
docdo=0
  cdo=1.9.8              # download path has a number that changes with version, e.g.
                         #     https://code.zmaw.de/attachments/download/9444/cdo-1.6.7.tar.gz
                         # check number at https://code.zmaw.de/projects/cdo/files
  cdodownpath=20826      # 1.6.3: 7220; 1.6.4: 8376; 1.6.6: 9367; 1.6.7: 9444; 1.7.2: 12760; 1.9.1: 15653;
                         # 1.9.2: 16035; 1.9.3: 16435; 1.9.7.1: 20124; 1.9.8: 20826
doncview=0
  ncview=2.1.8
dogsl=0
  gsl=2.6                # > 1.12 has some strange chmod a-w for gsl-config and gsl.pc
doantlr=0
  antlr=2.7.7            # one check fails with g++ clang 7.0.x on Mac OS X 10.11 (El Capitan) but can be ignored
donco=0
  nco=4.9.2
doopenmpi=0
  openmpi=4.1.6
dompich=0                # one check fails on macOS 13 (Ventura) but can be ignored
  mpich=4.1.2

# Python-Matplotlib
# Georeferencing in basemap
  dogeos=0                 # one check fails (< 3.6.2) on Mac OS X but can be ignored
  geos=3.11.0
# GeoTiffs
dogdal=0
  gdal=3.4.0
# Needed by ffmpeg
doyasm=0
  yasm=1.3.0
# Do animations/movies in matplotlib
doffmpeg=0               # Works if installed manually
  ffmpeg=4.2.2


# Optional tools

# 7zip is an extension of zip, e.g. used in CarboEurope database
dop7zip=0
  p7zip=16.02
# Old HDF format, e.g. MODIS data
dohdf4=0
  hdf4=4.2.14 # downloads broken for 4.2.15
# Text files as postscript -> pdf
doenscript=0
  enscript=1.6.6
# htop is extended top
dohtop=0
  htop=2.2.0

# Install netcdf-fortran for which Fortran compilers. Known compilers: gfortran nagfor pgfortran ifort
# fortran_compilers="gfortran nagfor pgfortran ifort"
fortran_compilers="gfortran"
# fortran_compilers="nagfor"
# fortran_compilers="gfortran nagfor"
# fortran_compilers="/opt/pgi/osx86-64/19.4/bin/pgfortran"
# fortran_compilers="pgfortran"
# # Standard Intel
# source /opt/intel/bin/compilervars.sh intel64
# fortran_compilers="ifort"
# # Intel OneAPI
# source /opt/intel/oneapi/setvars.sh
# fortran_compilers="ifort"
# # Intel @ explor
# module load intel/2019.4-full
# fortran_compilers="ifort"

# Extra CPPFLAGS and LDFLAGS, for example for libs in non-default path such as /opt/lib
if [[ "${sys}" == "darwin" ]] ; then
    if [[ -z ${HOMEBREW_PREFIX} ]] ; then
        if [[ -d /opt/homebrew ]] ; then
            HOMEBREW_PREFIX="/opt/homebrew"
        else
            HOMEBREW_PREFIX="/usr/local"
        fi
    fi
    # add path of m4 binary for netcdf et al.
    export PATH=${PATH}:${HOMEBREW_PREFIX}/opt/m4/bin
else
    HOMEBREW_PREFIX=
fi
if [[ "${sys}" == "darwin" ]] ; then
    EXTRA_CPPFLAGS="-I${HOMEBREW_PREFIX}/include"
    EXTRA_LDFLAGS="-L${HOMEBREW_PREFIX}/lib"
    if [[ -n ${ONEAPI_ROOT} ]] ; then
        EXTRA_LDFLAGS="${EXTRA_LDFLAGS} -L${prefix}/lib -L${PPATH}/lib"
        EXTRA_CPPFLAGS="${EXTRA_CPPFLAGS} -I${PPATH}/include"
    fi
else
    EXTRA_CPPFLAGS=
    EXTRA_LDFLAGS="-Wl,-rpath=${prefix}/lib"
fi

# Path to zlib's and pthread's include/ lib/ directories (e.g. lib/libz.*)
# Path to curl lib (libcurl.*) for cdo
if [[ "${sys}" == "darwin" ]] ; then
    osver=$(uname -r)
    osver=${osver%%.*}
    if [[ ${osver} -lt 22 ]] ; then  # macOS < 13
        # there are still links of, for example, libz.dylib in /usr/lib/
        # ZPATH=${prefix}
        ZPATH=/usr
        PPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr
        CURLLIB=/usr/lib
    else
        ZPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr
        PPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr
        CURLLIB=
    fi
else
    ZPATH=/usr
    PPATH=/usr
    if [[ ${kern} == *microsoft ]] ; then
        CURLLIB=/usr/lib/x86_64-linux-gnu
    else
        CURLLIB=/usr/lib64
    fi
fi

# Extra flag for FTP with curl
if [[ "${sys}" == "darwin" ]] ; then
    FTPFLAG=""
else
    FTPFLAG="--disable-epsv"
fi

# Path to X-devel for ncview. Searches for example checking X11/Intrinsic.h and X11/Xaw/Simple.h
if [[ "${sys}" == "darwin" ]] ; then
    XPATH=/usr/X11
    XLIB=${XPATH}/lib
    XINC=${XPATH}/include
else
    XPATH=/usr
    if [[ ${kern} == *microsoft ]] ; then
        XLIB=${XPATH}/lib/X11
    else
        XLIB=${XPATH}/lib64/X11
    fi
    XINC=${XPATH}/include/X11
fi

# PGI path
if [[ "${sys}" == "darwin" ]] ; then
    pgipath=/opt/pgi/osx86-64/17.10
fi

# CMake executable
if [[ "${sys}" == "darwin" ]] ; then
    if [[ -f /Applications/CMake.app/Contents/bin/cmake ]] ; then
        CMAKE=/Applications/CMake.app/Contents/bin/cmake
    else
        CMAKE=cmake
    fi
else
    CMAKE=cmake
fi

# --------------------------------------------------------------------
# Functions

function download() {
    izbase=${1}
    ihttp=${2}
    # download
    if [[ ${dodownload} -eq 1 ]] ; then curl ${FTPFLAG} -L -o ${izbase} ${ihttp}/${izbase} ; fi
}

function download_github() {
    izbase=${1}
    ihttp=${2}
    # download
    if [[ ${dodownload} -eq 1 ]] ; then curl -L -o ${izbase} ${ihttp} ; fi
}

function unpack() {
    izbase=${1}
    ibase=${2}
    # extract
    case ${izbase#${ibase}} in
        *.tar)     tar -xvf  ${izbase} ;;
        *.tar.bz)  tar -xvjf ${izbase} ;;
        *.tar.bz2) tar -xvjf ${izbase} ;;
        *.tar.gz)  tar -xvzf ${izbase} ;;
        *.tar.z)   tar -xvZf ${izbase} ;;
        *.tar.Z)   tar -xvZf ${izbase} ;;
        *.tar.xz)  tar -xvJf ${izbase} ;;
        *.zip)     unzip     ${izbase} ;;
        *) printf "Error: compression not known ${izbase#${ibase}}\n\n" 1>&2; exit 1 ;;
    esac
}

function download_unpack() {
    ibase=${1}
    izbase=${2}
    ihttp=${3}
    # download
    download ${izbase} ${ihttp}
    # extract
    unpack ${izbase} ${ibase}
}

function download_github_unpack() {
    ibase=${1}
    izbase=${2}
    ihttp=${3}
    # download
    download_github ${izbase} ${ihttp}
    # extract
    unpack ${izbase} ${ibase}
}

function configure() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # cd
    cd ${ibase}
    # configure
    echo "${bconf}" LDFLAGS=\"-L${prefix}/lib ${EXTRA_LDFLAGS}\" \
        CPPFLAGS=\"-I${prefix}/include ${EXTRA_CPPFLAGS}\" \
        ./configure --prefix=${iprefix} ${aconf}
    eval "${bconf}" LDFLAGS=\"-L${prefix}/lib ${EXTRA_LDFLAGS}\" \
        CPPFLAGS=\"-I${prefix}/include ${EXTRA_CPPFLAGS}\" \
        ./configure --prefix=${iprefix} ${aconf}
}

function configure_nocpp() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # cd
    cd ${ibase}
    # configure
    echo "${bconf}" LDFLAGS=\"-L${prefix}/lib ${EXTRA_LDFLAGS}\" \
        CPPFLAGS=\"${EXTRA_CPPFLAGS}\" \
        ./configure --prefix=${iprefix} ${aconf}
    eval "${bconf}" LDFLAGS=\"-L${prefix}/lib ${EXTRA_LDFLAGS}\" \
        CPPFLAGS=\"${EXTRA_CPPFLAGS}\" \
        ./configure --prefix=${iprefix} ${aconf}
}

function configure_make() {
    configure "$@"
    # make
    make -j ${ncpu}
}

function configure_make_nocpp() {
    configure_nocpp "$@"
    # make
    make -j ${ncpu}
}

function cmake_make() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # cd
    cd ${ibase}
    # build dir
    mkdir build
    cd build
    # cmake
    echo "${bconf}" LDFLAGS=\"-L${prefix}/lib ${EXTRA_LDFLAGS}\" \
        CPPFLAGS=\"-I${prefix}/include ${EXTRA_CPPFLAGS}\" \
        ${CMAKE} -DCMAKE_INSTALL_PREFIX=${iprefix} ${aconf} ../
    eval "${bconf}" LDFLAGS=\"-L${prefix}/lib ${EXTRA_LDFLAGS}\" \
        CPPFLAGS=\"-I${prefix}/include ${EXTRA_CPPFLAGS}\" \
        ${CMAKE} -DCMAKE_INSTALL_PREFIX=${iprefix} ${aconf} ../
    # make
    make -j ${ncpu}
}

function check() {
    # check
    case ${docheck} in
        1) make -j ${ncpu} check ;;
        2) set +e ; make -j ${ncpu} check ; set -e ;;
        *) : ;;
    esac
}

function check_test() {
    # check
    case ${docheck} in
        1) make -j ${ncpu} test ;;
        2) set +e ; make -j ${ncpu} test ; set -e ;;
        *) : ;;
    esac
}

function configure_make_check() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # make
    configure_make ${ibase} "${bconf}" "${aconf}"
    # check
    check
}

function cmake_make_check() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # make
    cmake_make ${ibase} "${bconf}" "${aconf}"
    # check
    check
}

function configure_make_test() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # make
    configure_make ${ibase} "${bconf}" "${aconf}"
    # check
    check_test
}

function cmake_make_test() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # make
    cmake_make ${ibase} "${bconf}" "${aconf}"
    # check
    check_test
}

function install() {
    mconf=${1}
    # install
    if [[ ${dosudo} -eq 1 ]] ; then
        # echo ${supw} | sudo -S make install
        sudo make install ${mconf}
    else
        make install ${mconf}
    fi
}

function configure_make_check_install() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # make
    configure_make ${ibase} "${bconf}" "${aconf}"
    # check
    check
    # install
    install
}

function configure_make_nocpp_check_install() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # make
    configure_make_nocpp ${ibase} "${bconf}" "${aconf}"
    # check
    check
    # install
    install
}

function cmake_make_check_install() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # make
    cmake_make ${ibase} "${bconf}" "${aconf}"
    # check
    check
    # install
    install
}

function cmake_make_test_install() {
    ibase=${1}
    bconf=${2}
    aconf=${3}
    # make
    cmake_make ${ibase} "${bconf}" "${aconf}"
    # check
    check_test
    # install
    install
}

function apply_netcdf_fortran_nag_patch() {
    #
    printf "Patch NetCDF ${netcdf4_fortran}\n"
    # patch ${base}/m4/libtool.m4 patchit.${pid}
    sed -n -e "/nagbegin.netcdf${netcdf4_fortran}.patch/,/nagend.netcdf${netcdf4_fortran}.patch/p" \
        ${dprog}/${pprog} > patchit.${pid}
    case ${netcdf4_fortran} in # normal: diff old new > patch
        4.2) # was done: diff new old > patch
            patch -R ${base}/m4/libtool.m4 patchit.${pid}
            ;;
        4.4.1) # was done: diff new old > patch
            patch -R ${base}/m4/libtool.m4 patchit.${pid}
            ;;
        4.4.2) # patch directly libtool
            patch ${base}/libtool patchit.${pid}
            ;;
        4.4.3) # do not patch libtool but change F77 test file
            sed -i -e 's/call EXIT/stop/' ${base}/nf_test/nf_test.F
            ;;
        4.4.4) # do not patch libtool but change F77 test files
            sed -i -e 's/call EXIT/stop/'  ${base}/nf_test/nf_test.F
            sed -i -e 's/&[[:blank:]]*$//' ${base}/nf_test/ftst_path.F
            sed -i -e 's/&[[:blank:]]*$//' ${base}/nf_test/ftst_rengrps.F
            sed -i -e 's/&[[:blank:]]*$//' ${base}/nf03_test/test03_read.F
            sed -i -e 's/&[[:blank:]]*$//' ${base}/nf03_test/test03_write.F
            sed -i -e 's/&[[:blank:]]*$//' ${base}/nf03_test/util03.F
            sed -i -e 's/&[[:blank:]]*$//' ${base}/nf03_test/f03tst_open_mem.F
            sed -i -e '/#endif/i\
#else\
subroutine dummy\
end subroutine dummy\
' ${base}/fortran/nf_logging.F90
            ;;
        4.4.5) # NAG does not allow compiling empty source files
            sed -i -e 's/include/ include/' ${base}/nf_test/ftst_rengrps.F
            sed -i -e '/#endif/i\
#else\
subroutine dummy\
end subroutine dummy\
' ${base}/fortran/nf_logging.F90
            ;;
        4.5.2 | 4.5.3) # patch configure script
            patch ${base}/configure patchit.${pid}
            ;;
        *)
            true
            ;;
    esac
    if [[ -f patchit.${pid} ]] ; then rm patchit.${pid} ; fi
}

function cleanup() {
    ibase=${1}
    izbase=${2}
    # clean up
    if [[ ${dosudo} -eq 1 ]] ; then
        sudo rm -rf ${ibase}
        if [[ ${dormtar} -eq 1 ]] ; then sudo rm ${izbase} ; fi
    else
        rm -rf ${ibase}
        if [[ ${dormtar} -eq 1 ]] ; then rm ${izbase} ; fi
    fi
}

function download_configure_make_check_install() {
    ibase=${1}
    izbase=${2}
    ihttp=${3}
    bconf=${4}
    aconf=${5}
    download_unpack ${ibase} ${izbase} ${ihttp}
    configure_make_check_install ${ibase} "${bconf}" "${aconf}"
    cd ..
    cleanup ${ibase} ${izbase}
}

function download_cmake_make_check_install() {
    ibase=${1}
    izbase=${2}
    ihttp=${3}
    bconf=${4}
    aconf=${5}
    download_unpack ${ibase} ${izbase} ${ihttp}
    cmake_make_check_install ${ibase} "${bconf}" "${aconf}"
    cd ../..
    cleanup ${ibase} ${izbase}
}

function download_cmake_make_test_install() {
    ibase=${1}
    izbase=${2}
    ihttp=${3}
    bconf=${4}
    aconf=${5}
    download_unpack ${ibase} ${izbase} ${ihttp}
    cmake_make_test_install ${ibase} "${bconf}" "${aconf}"
    cd ../..
    cleanup ${ibase} ${izbase}
}

# --------------------------------------------------------------------
# Start
# --------------------------------------------------------------------

# --------------------------------------------------------------------
# sudo

iprefix=${prefix}

# get sudo password
if [[ ${dosudo} -eq 1 ]] ; then
    printf "\nsudo password for make install into ${prefix}\n"
    # Ask for sudo password upfront
    sudo -v
    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
    # read -rs -p "sudo password for make install into ${prefix}: " supw
    printf "\n"
fi

# --------------------------------------------------------------------
# Install

# build zlib
if [[ ${dozlib} -eq 1 ]] ; then
    printf 'Build zlib\n'
    base=zlib-${zlib}
    zbase=${base}.tar.gz
    http=https://zlib.net
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build openssl
if [[ ${doopenssl} -eq 1 ]] ; then
    printf 'Build openssl\n'
    base=openssl-${openssl}
    zbase=${base}.tar.gz
    http=https://www.openssl.org/source
    # download
    download_unpack ${base} ${zbase} ${http}
    # configure
    cd ${base}
    if [[ "${sys}" == "darwin" && "${openssl}" < "1.1.0" ]] ; then
        # pod2man5.18 much stricter than ealier version but --stderr flag allows warnings instead of errors: patch Makefile.org
        sed -e '/@pod2man/s/";/ --stderr";/' Makefile.org > tmp.${pid}
        mv tmp.${pid} Makefile.org
        LDFLAGS="-L${prefix}/lib ${EXTRA_LDFLAGS}" CPPFLAGS="-I${prefix}/include ${EXTRA_CPPFLAGS}" \
            ./Configure --prefix=${iprefix} --openssldir=${iprefix}/openssl darwin64-x86_64-cc
    else
        LDFLAGS="-L${prefix}/lib ${EXTRA_LDFLAGS}" CPPFLAGS="-I${prefix}/include ${EXTRA_CPPFLAGS}" \
            ./config --prefix=${iprefix} --openssldir=${iprefix}/openssl
    fi
    # make
    make
    # check
    check_test
    # install
    install
    cd ..
    # clean
    cleanup ${base} ${zbase}
fi

# build szip
if [[ ${doszip} -eq 1 ]] ; then
    printf 'Build szip\n'
    base=szip-${szip}
    zbase=${base}.tar.gz
    http=http://www.hdfgroup.org/ftp/lib-external/szip/${szip}/src
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build hdf5
if [[ ${dohdf5} -eq 1 ]] ; then
    printf 'Build hdf5\n'
    base=hdf5-${hdf5}
    zbase=${base}.tar.gz
    if [[ "${hdf5}" > "1.10.0" ]] ; then
        http=https://support.hdfgroup.org/ftp/HDF5/releases/${base%.*}/${base}/src/${zbase}
        download_github_unpack ${base} ${zbase} ${http}
        if [[ ${doparallel} -eq 1 ]] ; then
            if [[ ${PATH} != *mpi* ]] ; then export PATH=${PATH}:${mpiprefix}/bin ; fi
            printf "  Build parallel\n"
            export MPICC='mpicc'
            export MPICXX='mpicxx'
            export MPIFC='mpifort'
            export MPIF77='mpifort'
            export MPIF90='mpifort'
            export CC=${MPICC}
            export CXX=${MPICXX}
            export FC=${MPIFC}
            export F77=${MPIF77}
            export F90=${MPIF90}
            dparallel="-DHDF5_ENABLE_PARALLEL=ON -DHDF5_BUILD_CPP_LIB=OFF"
        else
            dparallel=""
        fi
        # -DCMAKE_C_FLAGS='-Wno-error=implicit-function-declaration'
        cmake_make ${base} " " "-DHDF5_ENABLE_Z_LIB_SUPPORT=ON -DZLIB_ROOT==${ZPATH} -DHDF5_ENABLE_SZIP_SUPPORT=ON -DSZIP_ROOT=${prefix} ${dparallel}"
        if [[ ${hdf5check} -eq 1 ]] ; then
            check_test
        fi
        install
        if [[ "${sys}" == "darwin" ]] ; then
            # set @rpath/lib explicitly in library because LC_RPATH is not working all the time
            set +e
            hdflib=$(ls ${prefix}/lib/libhdf5.[0-9].dylib ${prefix}/lib/libhdf5.[0-9][0-9].dylib ${prefix}/lib/libhdf5.[0-9][0-9][0-9].dylib 2>/dev/null)
            hllib=$(ls ${prefix}/lib/libhdf5_hl.[0-9].dylib ${prefix}/lib/libhdf5_hl.[0-9][0-9].dylib ${prefix}/lib/libhdf5_hl.[0-9][0-9][0-9].dylib 2>/dev/null)
            htlib=$(ls ${hdf5prefix}/lib/libhdf5_tools.[0-9].dylib ${hdf5prefix}/lib/libhdf5_tools.[0-9][0-9].dylib ${hdf5prefix}/lib/libhdf5_tools.[0-9][0-9][0-9].dylib 2>/dev/null)
            set -e
            if [[ ${dosudo} -eq 1 ]] ; then
                sudo install_name_tool -id ${hdflib} ${hdflib}
                sudo install_name_tool -id ${hllib} ${hllib}
                sudo install_name_tool -change @rpath/$(basename ${hdflib}) ${hdflib} ${hllib}
                sudo install_name_tool -id ${htlib} ${htlib}
                sudo install_name_tool -change @rpath/$(basename ${hdflib}) ${hdflib} ${htlib}
            else
                install_name_tool -id ${hdflib} ${hdflib}
                install_name_tool -id ${hllib} ${hllib}
                install_name_tool -change @rpath/$(basename ${hdflib}) ${hdflib} ${hllib}
                install_name_tool -id ${htlib} ${htlib}
                install_name_tool -change @rpath/$(basename ${hdflib}) ${hdflib} ${htlib}
            fi
        fi
        cd ../..
        cleanup ${base} ${zbase}
    else
        http=http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-${hdf5%.*}/hdf5-${hdf5}/src
        download_configure_make_check_install ${base} ${zbase} ${http} " " "--with-zlib=${ZPATH} --with-szlib=${prefix} --enable-threadsafe --with-pthread=${PPATH}"
    fi
fi

# build netcdf4 C
if [[ ${donetcdf4} -eq 1 ]] ; then
    printf 'build netcdf4-C\n'
    base=netcdf-c-${netcdf4}
    zbase=${base}.tar.gz
    http=https://codeload.github.com/Unidata/netcdf-c/tar.gz/v${netcdf4}
    download_github_unpack ${base} ${zbase} ${http}
    # remove netcdf from homebrew if present
    export PATH=$(echo $PATH | tr ":" "\n" | grep -v netcdf | tr "\n" ":")
    if [[ "${netcdf4}" > "4.4.1" ]] ; then
        if [[ ${doparallel} -eq 1 ]] ; then
            if [[ ${PATH} != *mpi* ]] ; then export PATH=${PATH}:${mpiprefix}/bin ; fi
            printf "  Build parallel\n"
            export MPICC='mpicc'
            export MPICXX='mpicxx'
            export MPIFC='mpifort'
            export MPIF77='mpifort'
            export MPIF90='mpifort'
            export CC=${MPICC}
            export CXX=${MPICXX}
            export FC=${MPIFC}
            export F77=${MPIF77}
            export F90=${MPIF90}
        fi
        hdf5prefix=${prefix}
        cmake_make_test_install ${base} " " "-DHDF5_ROOT=${hdf5prefix} -DENABLE_DAP_REMOTE_TESTS=OFF -DENABLE_SHARED=ON"
        cd ../..
        cleanup ${base} ${zbase}
    else
        configure_make_check_install ${base} " " "--disable-dap-remote-tests"
        cd ..
        cleanup ${base} ${zbase}
    fi
    if [[ "${sys}" == "darwin" ]] ; then
        # set @rpath/lib explicitly in library because LC_RPATH is not working all the time
        set +e
        nclib=$(ls ${prefix}/lib/libnetcdf.[0-9].dylib ${prefix}/lib/libnetcdf.[0-9][0-9].dylib 2>/dev/null)
        hdflib=$(ls ${hdf5prefix}/lib/libhdf5.[0-9].dylib ${hdf5prefix}/lib/libhdf5.[0-9][0-9].dylib ${hdf5prefix}/lib/libhdf5.[0-9][0-9][0-9].dylib 2>/dev/null)
        hllib=$(ls ${hdf5prefix}/lib/libhdf5_hl.[0-9].dylib ${hdf5prefix}/lib/libhdf5_hl.[0-9][0-9].dylib ${hdf5prefix}/lib/libhdf5_hl.[0-9][0-9][0-9].dylib 2>/dev/null)
        set -e
        if [[ ${dosudo} -eq 1 ]] ; then
            sudo install_name_tool -id ${nclib} ${nclib}
            sudo install_name_tool -change @rpath/$(basename ${hdflib}) ${hdflib} ${nclib}
            sudo install_name_tool -change @rpath/$(basename ${hllib}) ${hllib} ${nclib}
        else
            install_name_tool -id ${nclib} ${nclib}
            install_name_tool -change @rpath/$(basename ${hdflib}) ${hdflib} ${nclib}
            install_name_tool -change @rpath/$(basename ${hllib}) ${hllib} ${nclib}
        fi
    fi
fi

# build netcdf4-fortran
if [[ ${donetcdf4_fortran} -eq 1 ]] ; then
    printf 'Build netcdf4-fortran\n'
    base=netcdf-fortran-${netcdf4_fortran}
    zbase=${base}.tar.gz
    http=https://codeload.github.com/Unidata/netcdf-fortran/tar.gz/v${netcdf4_fortran}
    download_github_unpack ${base} ${zbase} ${http}
    # remove netcdf from homebrew if present
    export PATH=$(echo $PATH | tr ":" "\n" | grep -v netcdf | tr "\n" ":")
    # configure / make / check / install for all fortran compilers
    for f_comp in ${fortran_compilers} ; do
        case ${f_comp} in
            *pgfortran*) # first pgfortran then gfortran in case
                printf "${f_comp} not supported at the moment for netcdf-fortran after change to cmake.\n"
                continue
                ;;
            *)
                true
                ;;
        esac
        hdf5prefix=${prefix}
        netcdfcprefix=${prefix}
        if [[ -n ${ONEAPI_ROOT} ]] ; then
            printf "Build ${base}-oneapi\n"
            iprefix=${prefix}/${base}-oneapi
            export LIBRARY_PATH=${LIBRARY_PATH}:/usr/local/lib:${PPATH}/lib
            export CPATH=${CPATH}:/usr/local/include:${PPATH}/include
        else
            printf "Build ${base}-$(basename ${f_comp})\n"
            iprefix=${prefix}/${base}-$(basename ${f_comp})
        fi
        if [[ ${doparallel} -eq 1 ]] ; then
            if [[ ${PATH} != *mpi* ]] ; then
                export PATH=${PATH}:${mpiprefix}/bin
            else
                mpiprefix=$(dirname $(dirname $(which mpicc)))
            fi
            printf "  Build parallel\n"
            export MPICC='mpicc'
            export MPICXX='mpicxx'
            export MPIFC='mpifort'
            export MPIF77='mpifort'
            export MPIF90='mpifort'
            export CC=${MPICC}
            export CXX=${MPICXX}
            export FC=${MPIFC}
            export F77=${MPIF77}
            export F90=${MPIF90}
            export LD_LIBRARY_PATH=${netcdfcprefix}/lib:${LD_LIBRARY_PATH}
            ZDIR=/usr/local/opt/zstd
            if [[ -d ${ZDIR} ]] ; then
                ZINC="-I${ZDIR}/include"
                ZLIBDIR="${ZDIR}/lib"
                ZLIB="-L${ZLIBDIR}"
                ZLIBS="-lzstd"
            fi
            cd ${base}
            CC=${MPICC} FC=${MPIF90} F77=${MPIF77} CPPFLAGS="-I${netcdfcprefix}/include -I${hdf5prefix}/include -I${mpiprefix}/include ${ZINC}" LDFLAGS="-L${netcdfcprefix}/lib -L${hdf5prefix}/lib -L${mpiprefix}/lib ${ZLIB}" LD_LIBRARY_PATH=${netcdfcprefix}/lib:${hdf5prefix}/lib:${mpiprefix}/lib:${ZLIBDIR} LIBS="-lnetcdf -lhdf5_hl -lhdf5 -lm -lz ${ZLIBS} -lbz2 -lcurl -lxml2" ./configure --prefix=${iprefix}
            make -j ${ncpu}
            check_test
            install
            cd ..
            iprefix=${prefix}
        else
            cd ${base}
            mkdir build
            cd build
            case ${f_comp} in
                *nag*)
                    # strange NCSHORT_T etc. in ftest.f, they are defined in confdefs.h in C-Library
                    sed -e '/ftest/d' ../nf_test/CMakeLists.txt > CMakeLists.tmp
                    mv CMakeLists.tmp ../nf_test/CMakeLists.txt
                    export LIBRARY_PATH=${LIBRARY_PATH}:/usr/local/lib:${PPATH}/lib
                    export CPATH=${CPATH}:/usr/local/include:${PPATH}/include
                    ;;
                *)
                    true
                    ;;
            esac
            if [[ "${sys}" == "darwin" ]] ; then
                nclib=${netcdfcprefix}/lib/libnetcdf.dylib
            else
                nclib=${netcdfcprefix}/lib/libnetcdf.so
            fi
            if [[ ! -e ${nclib} ]] ; then
                # if netcdf-c does not exist, try homebrew directory
                netcdfcprefix=${HOMEBREW_PREFIX}/opt/netcdf
                nclib=${netcdfcprefix}/lib/$(basename ${nclib})
            fi
            # dynamic
            echo "NC: ${nclib} ${netcdfcprefix}"
            cmake .. -DBUILD_SHARED_LIBS=ON -DCMAKE_Fortran_COMPILER=${f_comp} -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG -DCMAKE_INSTALL_PREFIX=${iprefix} -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Release -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_VERBOSE_MAKEFILE=ON -Wno-dev -DBUILD_TESTING=ON -DNETCDF_C_LIBRARY=${nclib} -DNETCDF_C_INCLUDE_DIR=${netcdfcprefix}/include
            # -DNC_EXTRA_DEPS="-lnetcdf -lhdf5 -lhdf5_hl -lsz -lz"
            case ${f_comp} in
                *nag*)
                    # nagfor < v7119 cannot deal with .tbd files but needs dylib files
                    if [[ "${sys}" == "darwin" ]] ; then
                        vnag=$(${f_comp} -V 2>&1 | head -1 | awk '{print $NF}')
                        if [[ ${vnag} -lt 7119 ]] ; then
                            osver=$(uname -r)
                            osver=${osver%%.*}
                            if [[ ${osver} -lt 22 ]] ; then  # macOS < 13
                                # there are still links of, for example, libz.dylib in /usr/lib/
                                for i in $(find . -name link.txt -print) ; do
                                    sed -e '/.tbd/s| [^ ]*\(/usr/lib/[^ ]*\).tbd| \1.dylib|g' ${i} > link.tmp
                                    mv link.tmp ${i}
                                done
                            else
                                for i in $(find . -name link.txt -print) ; do
                                    sed -e '/.tbd/s| [^ ]*lib/lib\([^ ]*\).tbd| -Wl,-l\1|g' ${i} > link.tmp
                                    mv link.tmp ${i}
                                done
                            fi
                        fi
                    fi
                    ;;
                *)
                    true
                    ;;
            esac
            make -j ${ncpu}
            check_test
            install
            if [[ "${sys}" == "darwin" ]] ; then
                # set @rpath/lib explicitly in library because LC_RPATH is not working all the time
                set +e
                ilib=$(ls ${iprefix}/lib/libnetcdff.[0-9].dylib ${iprefix}/lib/libnetcdff.[0-9][0-9].dylib 2>/dev/null)
                set -e
                if [[ ${dosudo} -eq 1 ]] ; then
                    sudo install_name_tool -id ${ilib} ${ilib}
                    # sudo install_name_tool -add_rpath ${iprefix}/lib ${ilib}
                else
                    install_name_tool -id ${ilib} ${ilib}
                    # install_name_tool -add_rpath ${iprefix}/lib ${ilib}
                fi
            fi
            # static - do not set compiler again
            nclib=${netcdfcprefix}/lib/libnetcdf.a
            cmake .. -DBUILD_SHARED_LIBS=OFF -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG -DCMAKE_INSTALL_PREFIX=${iprefix} -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Release -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_VERBOSE_MAKEFILE=ON -Wno-dev -DBUILD_TESTING=ON -DNETCDF_C_LIBRARY=${nclib} -DNETCDF_C_INCLUDE_DIR=${ncdir}/include -DNC_EXTRA_DEPS="-lnetcdf -lhdf5 -lhdf5_hl -lsz -lz -ldl -lm -lzstd -lbz2 -lcurl -lxml2"
            case ${f_comp} in
                *nag*)
                    # nagfor < v7119 cannot deal with .tbd files but needs dylib files
                    if [[ "${sys}" == "darwin" ]] ; then
                        vnag=$(${f_comp} -V 2>&1 | head -1 | awk '{print $NF}')
                        if [[ ${vnag} -lt 7119 ]] ; then
                            osver=$(uname -r)
                            osver=${osver%%.*}
                            if [[ ${osver} -lt 22 ]] ; then  # macOS < 13
                                # there are still links of, for example, libz.dylib in /usr/lib/
                                for i in $(find . -name link.txt -print) ; do
                                    sed -e '/.tbd/s| [^ ]*\(/usr/lib/[^ ]*\).tbd| \1.dylib|g' ${i} > link.tmp
                                    mv link.tmp ${i}
                                done
                            else
                                for i in $(find . -name link.txt -print) ; do
                                    sed -e '/.tbd/s| [^ ]*lib/lib\([^ ]*\).tbd| -Wl,-l\1|g' ${i} > link.tmp
                                    mv link.tmp ${i}
                                done
                            fi
                        fi
                    fi
                    ;;
                *)
                    true
                    ;;
            esac
            make -j ${ncpu}
            check_test
            install
            cd ..
            if [[ ${dosudo} -eq 1 ]] ; then
                sudo rm -r build
            else
                rm -r build
            fi
            iprefix=${prefix}
            cd ..
        fi
    done
    cleanup ${base} ${zbase}
fi

# build netcdf3
if [[ ${donetcdf3} -eq 1 ]] ; then
    printf 'Build netcdf3\n'
    base=netcdf-${netcdf3}
    zbase=${base}.tar.gz
    http=http://www.unidata.ucar.edu/downloads/netcdf/ftp
    download_unpack ${base} ${zbase} ${http}
    # # patch test_write.F
    # sed -i -e 's/IF (err .ne. NF_EINVAL)/IF (err .ne. 0)/' ${base}/nf_test/test_write.F
    # configure / make / check / install for all fortran compilers
    for f_comp in ${fortran_compilers} ; do
        printf "Build ${base}-$(basename ${f_comp})\n"
        iprefix=${prefix}/${base}-$(basename ${f_comp})
        ncpuold=${ncpu} # does not work with make on multiple CPUs
        ncpu=1
        case ${f_comp} in
            *pgfortran*) # first pgfortran then gfortran in case
                EXTRA_CPPFLAGS="${EXTRA_CPPFLAGS} -DpgiFortran"
                EXTRA_LDLFAGS="${EXTRA_LDFLAGS} -L${pgipath}/lib"
                configure_make_nocpp_check_install ${base} "FC=${f_comp} FCLAGS='-O -tp=p7-64' F77=${f_comp} FFLAGS='-O -tp=p7-64'" "--enable-shared --enable-f90"
                EXTRA_CPPFLAGS="${EXTRA_CPPFLAGS% ?*}"
                EXTRA_LDFLAGS="${EXTRA_LDFLAGS% ?*}"
                ;;
            *gfortran*) # first pgfortran then gfortran in case
                EXTRA_CPPFLAGS="${EXTRA_CPPFLAGS} -DgFortran"
                configure_make_check_install ${base} "FC=${f_comp}" "--enable-shared --enable-f90"
                EXTRA_CPPFLAGS="${EXTRA_CPPFLAGS% ?*}"
                ;;
            *nag*)
                EXTRA_CPPFLAGS="${EXTRA_CPPFLAGS} -DNAGf90Fortran"
                configure_make_nocpp_check_install ${base} "FC=${f_comp} F77=${f_comp} FCFLAGS='-O3 -fpp -mismatch_all -kind=byte -unsharedf95 -ieee=full' FFLAGS='-O3 -fpp -mismatch_all -kind=byte -unsharedf95 -ieee=full -fixed -dusty'" "--enable-shared --enable-f90"
                EXTRA_CPPFLAGS="${EXTRA_CPPFLAGS% ?*}"
                ;;
            *ifort*)
                if [[ "${sys}" == "darwin" ]] ; then
                    configure_make_nocpp_check_install ${base} "FC=${f_comp} F77=${f_comp} FCFLAGS='-O3 -xHost -ip -no-prec-div -mdynamic-no-pic -assume byterecl -fp-model precise -m64' FFLAGS='-O3 -xHost -ip -no-prec-div -mdynamic-no-pic -assume byterecl -fp-model precise -m64'" "--enable-shared --enable-f90"
                else
                    configure_make_check_install ${base} "FC=${f_comp} F77=${f_comp} FCFLAGS='-O3 -xHost -ip -no-prec-div -static-intel -assume byterecl -fp-model precise -m64' FFLAGS='-O3 -xHost -ip -no-prec-div -static-intel -assume byterecl -fp-model precise -m64'" "--enable-shared --enable-f90"
                fi
                ;;
            *)
                printf "${pprog}: Fortran compiler not known: ${f_comp}.\n\n"
                ncpu=${ncpuold}
                iprefix=${prefix}
                continue
                ;;
        esac
        ncpu=${ncpuold}
        iprefix=${prefix}
        # clean for next fortran compiler
        make clean
        cd ..
    done
    cleanup ${base} ${zbase}
fi

# build udunits
if [[ ${doudunits} -eq 1 ]] ; then
    printf 'build udunits\n'
    base=udunits-${udunits}
    zbase=${base}.tar.gz
    http=ftp://ftp.unidata.ucar.edu/pub/udunits
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build libpng
if [[ ${dolibpng} -eq 1 ]] ; then
    printf 'build libpng\n'
    base=libpng-${libpng}
    zbase=${base}.tar.gz
    http=http://downloads.sourceforge.net/project/libpng/libpng16/${libpng}
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build libjpeg
if [[ ${dolibjpeg} -eq 1 ]] ; then
    printf 'build libjpeg\n'
    base=jpegsrc.v${libjpeg}
    zbase=${base}.tar.gz
    http=http://www.ijg.org/files
    download_unpack ${base} ${zbase} ${http}
    base=jpeg-${libjpeg}
    configure_make_check_install ${base}
    cd ..
    cleanup ${base} ${zbase}
fi

# build libtiff
if [[ ${dolibtiff} -eq 1 ]] ; then
    printf 'build libtiff\n'
    base=tiff-${libtiff}
    zbase=${base}.tar.gz
    http=https://download.osgeo.org/libtiff
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build sqlite
if [[ ${dosqlite} -eq 1 ]] ; then
    printf 'build sqlite\n'
    maj=$(echo ${sqlite} | cut -f 1 -d '.')
    min=$(echo ${sqlite} | cut -f 2 -d '.')
    mic=$(echo ${sqlite} | cut -f 3 -d '.' | printf "%04d")
    vsqlite="${maj}${min}${mic}"
    base=sqlite-autoconf-${vsqlite}
    zbase=${base}.tar.gz
    http=https://www.sqlite.org/2022
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build proj4
if [[ ${doproj4} -eq 1 ]] ; then
    printf 'build proj4\n'
    base=proj-${proj4}
    zbase=${base}.tar.gz
    http=https://download.osgeo.org/proj
    download_configure_make_check_install ${base} ${zbase} ${http} "PKG_CONFIG_PATH='${prefix}/lib/pkgconfig'"
fi

# build jasper
if [[ ${dojasper} -eq 1 ]] ; then
    printf 'build jasper\n'
    base=jasper-${jasper}
    if [[ "${jasper}" > "1.900.1" ]] ; then
        zbase=${base}.tar.gz
    else
        zbase=${base}.zip
    fi
    http=http://www.ece.uvic.ca/~frodo/jasper/software
    download_configure_make_check_install ${base} ${zbase} ${http} " " "--enable-shared"
fi

# build eccodes
if [[ ${doeccodes} -eq 1 ]] ; then
    printf 'build eccodes\n'
    base=eccodes-${eccodes}-Source
    zbase=${base}.tar.gz
    http=https://software.ecmwf.int/wiki/download/attachments/45757960/
    download_cmake_make_check_install ${base} ${zbase} ${http} " " "-DENABLE_PNG=ON"
    # download_unpack ${base} ${zbase} ${http}
    # cd ${base}
    # mkdir build
    # cd build
    # ${CMAKE} -DCMAKE_INSTALL_PREFIX=${prefix} -DENABLE_PNG=ON ../
    # make
    # # make check
    # sudo make install
    # cd ../..
    # cleanup ${base} ${zbase}
fi

# build grib_api
if [[ ${dogrib_api} -eq 1 ]] ; then
    printf 'build grib_api\n'
    base=grib_api-${grib_api}-Source
    zbase=${base}.tar.gz
    http=https://software.ecmwf.int/wiki/display/GRIB/Releases
    if [[ "${grib_api}" > "1.16.0" ]] ; then
        download_configure_make_check_install ${base} ${zbase} ${http}
    else
        download_unpack ${base} ${zbase} ${http}
        # change all files to be writeable, otherwise rm asks to override -r--r--r on Mac OS X
        chmod -R u+w ${base}
        # make install
        configure_make_check_install ${base}
        cd ..
        cleanup ${base} ${zbase}
    fi
fi

# build cdo
if [[ ${docdo} -eq 1 ]] ; then
    printf 'build cdo\n'
    base=cdo-${cdo}
    zbase=${base}.tar.gz
    # zbase=cdo-current.tar.gz
    http=https://code.zmaw.de/attachments/download/${cdodownpath}
    download_unpack ${base} ${zbase} ${http}
    # patch cdo
    if [[ ${cdo} == '1.6.2' ]] ; then
        # patch grid reference.c
        printf '23d22\n< #include <curl/types.h>\n' | patch --input=- ${base}/src/gridreference.c
        # patch job.c
        printf '352d351\n< #  include <curl/types.h>\n' | patch --input=- ${base}/src/job.c
    fi
    if [[ ${cdo} < '1.9.1' ]] ; then
        configure_make_check_install ${base} " " "--prefix=${prefix} --with-szlib=yes --with-hdf5=yes --with-jasper=${prefix} --with-proj=${prefix} --with-udunits2=${prefix}/lib --with-curl=${CURLLIB} --with-netcdf=${prefix} --with-grib_api=yes"
    else
        configure_make_check_install ${base} " " "--prefix=${prefix} --with-szlib=yes --with-hdf5=yes --with-jasper=${prefix} --with-proj=${prefix} --with-udunits2=${prefix}/lib --with-curl=${CURLLIB} --with-netcdf=${prefix} --with-eccodes=${prefix}"
    fi
    cd ..
    cleanup ${base} ${zbase}
fi

# build ncview
if [[ ${doncview} -eq 1 ]] ; then
    printf 'build ncview\n'
    base=ncview-${ncview}
    zbase=${base}.tar.gz
    http=ftp://cirrus.ucsd.edu/pub/ncview
    download_unpack ${base} ${zbase} ${http}
    # change some defaults in code
    sed -e '/^#define DEFAULT_BLOWUP[[:blank:]]/s/DEFAULT_BLOWUP.*/DEFAULT_BLOWUP 8/' \
        -e '/^#define DEFAULT_MIN_MAX_METHOD[[:blank:]]/s/DEFAULT_MIN_MAX_METHOD.*/DEFAULT_MIN_MAX_METHOD MIN_MAX_METHOD_EXHAUST/' \
        -e '/^#define DEFAULT_BLOWUP_TYPE[[:blank:]]/s/DEFAULT_BLOWUP_TYPE.*/DEFAULT_BLOWUP_TYPE BLOWUP_REPLICATE/' \
        -e '/^#define DEFAULT_AUTO_OVERLAY[[:blank:]]/s/DEFAULT_AUTO_OVERLAY.*/DEFAULT_AUTO_OVERLAY FALSE/' \
        -e '/options.blowup[[:blank:]]\{1,\}=/s/blowup[[:blank:]]\{1,\}=.*/blowup = DEFAULT_BLOWUP;/' \
        -e '/options.beep_on_restart[[:blank:]]\{1,\}=/s/beep_on_restart[[:blank:]]\{1,\}=.*/beep_on_restart = TRUE;/' \
        ${base}/src/ncview.c > tmp.${pid}
    mv tmp.${pid} ${base}/src/ncview.c
    # Mac OS X uses .dylib for shared libraries, .so hardcoded in configure
    if [[ "${sys}" == "darwin" ]] ; then
        sed -e 's/\.so/.dylib/' -e '/RPDIR=/s/RPDIR=.*/RPDIR=${word:2}/' ${base}/configure > tmp.${pid}
        mv tmp.${pid} ${base}/configure
        chmod +x ${base}/configure
    fi
    # make install
    if [[ "${sys}" == "darwin" ]] ; then
        EXTRA_LDLFAGS="${EXTRA_LDFLAGS} -L${prefix}/lib -lnetcdf"
    fi
    if [[ ${kern} == *microsoft ]] ; then
        configure_make_check_install ${base} " " "--prefix=${prefix} --with-nc_config=${prefix}/bin/nc-config --with-udunits2_incdir=${prefix}/include --with-udunits2_libdir=${prefix}/lib --x-libraries=${XLIB} --x-includes=${XINC} --with-png_incdir=/usr/include --with-png_libdir=/usr/lib/x86_64-linux-gnu"
    else
        configure_make_check_install ${base} " " "--prefix=${prefix} --with-nc_config=${prefix}/bin/nc-config --with-udunits2_incdir=${prefix}/include --with-udunits2_libdir=${prefix}/lib --x-libraries=${XLIB} --x-includes=${XINC} --with-png_incdir=${prefix}/include --with-png_libdir=${prefix}/lib"
    fi
    if [[ "${sys}" == "darwin" ]] ; then
        EXTRA_LDFLAGS="${EXTRA_LDFLAGS% ?*}"
        EXTRA_LDFLAGS="${EXTRA_LDFLAGS% ?*}"
    fi
    cd ..
    cleanup ${base} ${zbase}
fi

# build gsl
if [[ ${dogsl} -eq 1 ]] ; then
    printf 'build gsl\n'
    base=gsl-${gsl}
    zbase=${base}.tar.gz
    http=ftp://ftp.gnu.org/gnu/gsl
    # download and unpack
    download_unpack ${base} ${zbase} ${http}
    # make and make check
    configure_make_check ${base}
    # # change all files to be writeable, otherwise rm asks to override -r--r--r on Mac OS X
    # chmod -R u+w .
    install
    cd ..
    # clean
    cleanup ${base} ${zbase}
fi

# build antlr
if [[ ${doantlr} -eq 1 ]] ; then
    printf 'build antlr\n'
    base=antlr-${antlr}
    zbase=${base}.tar.gz
    http=http://www.antlr2.org/download
    # download and unpack
    download_unpack ${base} ${zbase} ${http}
    # if [[ "${sys}" != "darwin" ]] ; then
        sed -i '19 a #include <stdio.h>' ${base}/lib/cpp/antlr/CharInputBuffer.hpp
        sed -i '19 a #include <stdlib.h>' ${base}/lib/cpp/antlr/CharInputBuffer.hpp
        sed -i '26 a #include <stdio.h>' ${base}/lib/cpp/antlr/CharScanner.hpp
        sed -i '27 a #include <strings.h>' ${base}/lib/cpp/antlr/CharScanner.hpp
    # fi
    configure_make ${base}
    # if [[ "${sys}" != "darwin" ]] ; then
    #   sed -i '9 a #include <stdlib.h>' ${base}/examples/cpp/transform/CalcTreeWalker.cpp
    #   sed -i '14 a #include <stdio.h>' ${base}/examples/cpp/calc/Main3.cpp
    #   sed -i '15 a #include <cstring>' ${base}/examples/cpp/calc/Main3.cpp
    # fi
    # make check; one check fails on Mac OS X -> ignore it
    dochecksave=${docheck}
    if [[ ${docheck} -gt 0 ]] ; then docheck=2 ; fi
    check_test
    docheck=${dochecksave}
    # install
    install
    cd ..
    # clean
    cleanup ${base} ${zbase}
fi

# build nco
if [[ ${donco} -eq 1 ]] ; then
    printf 'build nco\n'
    base=nco-${nco}
    zbase=${base}.tar.gz
    http=https://github.com/nco/nco/archive/${nco}.tar.gz
    download_github_unpack ${base} ${zbase} ${http}
    # change some unknown LaTeX
    sed -e '/textdegree/d' ${base}/doc/nco.texi > tmp.${pid}
    mv tmp.${pid} ${base}/doc/nco.texi
    # make install
    configure_make_check_install ${base} "GSL_ROOT=${prefix} PATH_TO_NCGEN=${prefix}/bin/ncgen NETCDF_INC=${prefix}/include NETCDF_LIB=${prefix}/lib NETCDF4_ROOT=${prefix} UDUNITS2_PATH=${prefix} YACC=yacc" "--enable-dap-netcdf --enable-gsl"
    cd ..
    cleanup ${base} ${zbase}
fi

# build openmpi
if [[ ${doopenmpi} -eq 1 ]] ; then
    printf 'build openmpi\n'
    base=openmpi-${openmpi}
    zbase=${base}.tar.gz
    http=http://www.open-mpi.org/software/ompi/v${openmpi%\.*}/downloads
    download_unpack ${base} ${zbase} ${http}
    # configure / make / check / install for all fortran compilers
    for f_comp in ${fortran_compilers} ; do
        if [[ -n ${ONEAPI_ROOT} ]] ; then
            printf "Build ${base}-oneapi\n"
            iprefix=${prefix}/${base}-oneapi
            export LIBRARY_PATH=${LIBRARY_PATH}:/usr/local/lib:${PPATH}/lib
            export CPATH=${CPATH}:/usr/local/include:${PPATH}/include
        else
            printf "Build ${base}-$(basename ${f_comp})\n"
            iprefix=${prefix}/${base}-$(basename ${f_comp})
        fi
        case ${f_comp} in
            *pgfortran*) # first pgfortran then gfortran in case
                bconf="FC=${f_comp} F77=${f_comp} FCFLAGS='-fast -tp=p7-64' FFLAGS='-fast -tp=p7-64'"
        aconf="--with-hwloc=internal --with-libevent=internal"
                ;;
            *gfortran*) # first pgfortran then gfortran in case
                bconf="FC=${f_comp}"
                aconf="--with-hwloc=internal --with-libevent=internal"
                ;;
            *nag*)
                # bconf="FC=${f_comp} FCFLAGS='-O3 -fpp -mismatch_all -kind=byte -unsharedf95 -ieee=full'"
                bconf="FC=${f_comp} FCFLAGS='-O3 -fpp -mismatch_all -unsharedf95 -ieee=full'"
                aconf="--with-hwloc=internal --with-libevent=internal"
                ;;
            *ifort*)
                if [[ "${sys}" == "darwin" ]] ; then
                    bconf="FC=${f_comp} FCFLAGS='-O3 -xHost -ip -no-prec-div -mdynamic-no-pic -assume byterecl -fp-model precise -m64'"
                else
                    bconf="FC=${f_comp} FCFLAGS='-O3 -xHost -ip -no-prec-div -static-intel -assume byterecl -fp-model precise -m64'"
                fi
                aconf="--with-hwloc=internal --with-libevent=internal --enable-mpi-fortran=usempi"
                ;;
            *)
                printf "${pprog}: Fortran compiler not known: ${f_comp}.\n\n"
                continue
                ;;
        esac
        configure_make_check_install ${base} "${bconf}" "${aconf}"
        iprefix=${prefix}
        # clean for next fortran compiler
        make clean
        cd ..
    done
    cleanup ${base} ${zbase}
fi

# build mpich
if [[ ${dompich} -eq 1 ]] ; then
    printf 'build mpich\n'
    base=mpich-${mpich}
    zbase=${base}.tar.gz
    http=http://www.mpich.org/static/downloads/${mpich}
    download_unpack ${base} ${zbase} ${http}
    # configure / make / check / install for all fortran compilers
    for f_comp in ${fortran_compilers} ; do
        if [[ -n ${ONEAPI_ROOT} ]] ; then
            printf "Build ${base}-oneapi\n"
            iprefix=${prefix}/${base}-oneapi
            export LIBRARY_PATH=${LIBRARY_PATH}:/usr/local/lib:${PPATH}/lib
            export CPATH=${CPATH}:/usr/local/include:${PPATH}/include
        else
            printf "Build ${base}-$(basename ${f_comp})\n"
            iprefix=${prefix}/${base}-$(basename ${f_comp})
        fi
	aconf=" "
        case ${f_comp} in
            *pgfortran*) # first pgfortran then gfortran in case
                bconf="FC=${f_comp} F77=${f_comp} FCFLAGS='-fast -tp=p7-64' FFLAGS='-fast -tp=p7-64'"
                ;;
            *gfortran*) # first pgfortran then gfortran in case
                bconf="FC=${f_comp} FFLAGS='-fallow-argument-mismatch' FCFLAGS='-fallow-argument-mismatch'"
                ;;
            *nag*)
                # bconf="FC=${f_comp} FCFLAGS='-O3 -fpp -mismatch_all -kind=byte -unsharedf95 -ieee=full' F77=${f_comp} FFLAGS='-O3 -fpp -mismatch_all -kind=byte -ieee=full'"
                bconf="FC=${f_comp} FCFLAGS='-O3 -fpp -mismatch_all -unsharedf95 -ieee=full' F77=${f_comp} FFLAGS='-O3 -fpp -mismatch_all -ieee=full'"
                aconf="--disable-shared"
                ;;
            *ifort*)
                if [[ "${sys}" == "darwin" ]] ; then
                    bconf="FC=${f_comp} FCFLAGS='-O3 -xHost -ip -no-prec-div -mdynamic-no-pic -assume byterecl -fp-model precise -m64'"
                else
                    bconf="FC=${f_comp} FCFLAGS='-O3 -xHost -ip -no-prec-div -static-intel -assume byterecl -fp-model precise -m64'"
                fi
                ;;
            *)
                printf "${pprog}: Fortran compiler not known: ${f_comp}.\n\n"
                continue
                ;;
        esac
        configure_make_check_install ${base} "${bconf}" "${aconf}"
        iprefix=${prefix}
        # clean for next fortran compiler
        make clean
        cd ..
    done
    cleanup ${base} ${zbase}
fi

# build geos
if [[ ${dogeos} -eq 1 ]] ; then
    printf 'build geos\n'
    base=geos-${geos}
    zbase=${base}.tar.bz2
    http=https://download.osgeo.org/geos
    download_unpack ${base} ${zbase} ${http}
    # make and make test
    if [[ "${sys}" == "darwin" ]] ; then
        configure_make ${base} "CC=/usr/bin/clang CXX=/usr/bin/clang++"
    else
        configure_make ${base}
    fi
    # make check; one check fails on Mac OS X -> ignore it
    dochecksave=${docheck}
    if [[ ${docheck} -gt 0 ]] ; then docheck=2 ; fi
    check
    docheck=${dochecksave}
    # install
    install
    cd ..
    # clean
    cleanup ${base} ${zbase}
fi

# build gdal
if [[ ${dogdal} -eq 1 ]] ; then
    printf 'build gdal\n'
    base=gdal-${gdal}
    zbase=${base}.tar.gz
    http=https://download.osgeo.org/gdal/${gdal}
    download_unpack ${base} ${zbase} ${http}
    configure_make ${base} " " "--without-pg"
    # there is no make check or make test
    install
    cd ..
    cleanup ${base} ${zbase}
fi

# build yasm
if [[ ${doyasm} -eq 1 ]] ; then
    printf 'build yasm\n'
    base=yasm-${yasm}
    zbase=${base}.tar.gz
    http=http://www.tortall.net/projects/yasm/releases
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build ffmpeg
if [[ ${doffmpeg} -eq 1 ]] ; then
    printf 'build ffmpeg\n'
    base=ffmpeg-${ffmpeg}
    zbase=${base}.tar.bz2
    http=http://ffmpeg.org/releases
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build p7zip
if [[ ${dop7zip} -eq 1 ]] ; then
    printf 'build p7zip\n'
    base=p7zip_${p7zip}
    zbase=${base}_src_all.tar.bz2
    #http=http://switch.dl.sourceforge.net/project/p7zip/p7zip/${p7zip}
    http=http://sourceforge.net/projects/p7zip/files/latest/download
    # download and unpack
    download_unpack ${base} ${zbase} ${http}
    # make
    cd ${base}
    # cp makefile.macosx_64bits makefile.machine
    cp makefile.macosx_llvm_64bits makefile.machine
    make
    # check
    case ${docheck} in
        1) make -j ${ncpu} all_test ;;
        2) set +e ; make -j ${ncpu} all_test ; set -e ;;
        *) : ;;
    esac
    # install
    install
    cd ..
    # clean
    cleanup ${base} ${zbase}
fi

# build hdf4
if [[ ${dohdf4} -eq 1 ]] ; then
    printf 'build hdf4\n'
    base=hdf-${hdf4}
    zbase=${base}.tar.gz
    http=https://support.hdfgroup.org/ftp/HDF/releases/HDF${hdf4}/src
    # Problems reading netcdf with HDF4 - we do not need it though
    iprefix=${prefix}/${base}
    if [[ "${sys}" == "darwin" && ${ver} > 13.9.9 ]] ; then
        # download and unpack
        download_unpack ${base} ${zbase} ${http}
        # make and make test
        configure_make ${base} " " "--with-zlib=${ZPATH} --with-szlib=${prefix} --with-jpeg=${prefix}"
        # make check; two checks fail on Mac OS X -> ignore it
        dochecksave=${docheck}
        if [[ ${docheck} -gt 0 ]] ; then docheck=2 ; fi
        check
        docheck=${dochecksave}
        # install
        install
        cd ..
        # clean
        cleanup ${base} ${zbase}
    else
        download_configure_make_check_install ${base} ${zbase} ${http} " " "--with-zlib=${ZPATH} --with-szlib=${prefix} --with-jpeg=${prefix}"
    fi
    iprefix=${prefix}
fi

# build enscript
if [[ ${doenscript} -eq 1 ]] ; then
    printf 'build enscript\n'
    base=enscript-${enscript}
    zbase=${base}.tar.gz
    http=http://ftp.gnu.org/gnu/enscript
    download_configure_make_check_install ${base} ${zbase} ${http}
fi

# build htop
if [[ ${dohtop} -eq 1 ]] ; then
    printf 'build htop\n'
    base=htop-${htop}
    zbase=${base}.tar.gz
    http=http://hisham.hm/htop/releases/${htop}
    download_configure_make_check_install ${base} ${zbase} ${http}
fi


# --------------------------------------------------------------------
# Finish

exit 0

# --------------------------------------------------------------------
# netCDF patches
# --------------------------------------------------------------------

# --------------------------------------------------------------------
# netcdf4.2 patch for nagfor from NAG support - attention wrong way round, use patch -R
# nagbegin.netcdf4.2.patch
4054,4058d4053
<       nagfor*)
<         _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'
<         _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'
<         _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'
<         ;;
4485,4488d4479
<       nagfor*) # NAG Fortran 5.3
<         _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\"\"; do test  -n \"$conv\" && new_convenience=\"$new_convenience,$conv\"; done; func_echo_all \"$new_convenience\"`,-Wl,,--no-whole-archive'
<         tmp_sharedflag='-Wl,-shared'
<           ;;
4515,4517d4505
<       nagfor*) # NAG Fortran 5.3
<         _LT_TAGVAR(archive_cmds, $1)='$CC '"$tmp_sharedflag"' $libobjs $deplibs $compiler_flags ${wl}-soname,,$soname -o $lib'
<           ;;
# nagend.netcdf4.2.patch


# --------------------------------------------------------------------
# netcdf4.4.1 patch for nagfor modified from netcdf4.2 patch - attention wrong way round, use patch -R
# nagbegin.netcdf4.4.1.patch
4485,4488d4819
<       nagfor*) # NAG Fortran
<         _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\"\"; do test  -n \"$conv\" && new_convenience=\"$new_convenience,$conv\"; done; func_echo_all \"$new_convenience\"`,-Wl,,--no-whole-archive'
<         tmp_sharedflag='-Wl,-shared'
<           ;;
4515,4517d4845
<       nagfor*) # NAG Fortran
<         _LT_TAGVAR(archive_cmds, $1)='$CC '"$tmp_sharedflag"' $libobjs $deplibs $compiler_flags ${wl}-soname,,$soname -o $lib'
<           ;;
# nagend.netcdf4.4.1.patch


# --------------------------------------------------------------------
# netcdf4.4.2 patch for nagfor
# nagbegin.netcdf4.4.2.patch
357,358c357,358
< archive_cmds="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring \$single_module"
< archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring \$single_module \$wl-exported_symbols_list,\$output_objdir/\$libname-symbols.expsym"
---
> archive_cmds="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\$rpath/\$soname \$verstring \$single_module"
> archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\$rpath/\$soname \$verstring \$single_module \$wl-exported_symbols_list,\$output_objdir/\$libname-symbols.expsym"
1066a1067
>     eval "$1=\$(echo \$$1)"
1074a1076
>     eval "$1=\$(echo \$$1)"
5045c5047
<       func_warning "remember to run '$progname --finish$future_libdirs'"
---
>       func_warning "remember to run '$progname --finish $future_libdirs'"
5050c5052
<       exec_cmd='$SHELL "$progpath" $preserve_args --finish$current_libdirs'
---
>       exec_cmd='$SHELL "$progpath" $preserve_args --finish $current_libdirs'
11702,11703c11704,11705
< archive_cmds="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring \$single_module"
< archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring \$single_module \$wl-exported_symbols_list,\$output_objdir/\$libname-symbols.expsym"
---
> archive_cmds="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\$rpath/\$soname \$verstring \$single_module"
> archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\$rpath/\$soname \$verstring \$single_module \$wl-exported_symbols_list,\$output_objdir/\$libname-symbols.expsym"
11851,11852c11853,11854
< archive_cmds="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring \$single_module"
< archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring \$single_module \$wl-exported_symbols_list,\$output_objdir/\$libname-symbols.expsym"
---
> archive_cmds="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\$rpath/\$soname \$verstring \$single_module"
> archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\$rpath/\$soname \$verstring \$single_module \$wl-exported_symbols_list,\$output_objdir/\$libname-symbols.expsym"
# nagend.netcdf4.4.2.patch


# --------------------------------------------------------------------
# netcdf4.5.2 patch for nagfor
# nagbegin.netcdf4.5.2.patch
12666c12666
<     archive_cmds="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
---
>     archive_cmds="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
12668c12668
<     archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
---
>     archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
16512c16512
<     archive_cmds_F77="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
---
>     archive_cmds_F77="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
16514c16514
<     archive_expsym_cmds_F77="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
---
>     archive_expsym_cmds_F77="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
19643c19643
<     archive_cmds_FC="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
---
>     archive_cmds_FC="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
19645c19645
<     archive_expsym_cmds_FC="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
---
>     archive_expsym_cmds_FC="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
# nagend.netcdf4.5.2.patch


# --------------------------------------------------------------------
# netcdf4.5.3 patch for nagfor
# nagbegin.netcdf4.5.3.patch
12765c12765
<     archive_cmds="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
---
>     archive_cmds="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
12767c12767
<     archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
---
>     archive_expsym_cmds="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
16589c16589
<     archive_cmds_F77="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
---
>     archive_cmds_F77="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
16591c16591
<     archive_expsym_cmds_F77="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
---
>     archive_expsym_cmds_F77="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
19698c19698
<     archive_cmds_FC="\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
---
>     archive_cmds_FC="\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dsymutil"
19700c19700
<     archive_expsym_cmds_FC="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC -dynamiclib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags -install_name \$rpath/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
---
>     archive_expsym_cmds_FC="sed 's|^|_|' < \$export_symbols > \$output_objdir/\$libname-symbols.expsym~\$CC \${wl}-dylib \$allow_undefined_flag -o \$lib \$libobjs \$deplibs \$compiler_flags \${wl}-install_name \${wl}\${rpath# *}/\$soname \$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil"
# nagend.netcdf4.5.3.patch
